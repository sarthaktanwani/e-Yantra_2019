
NS_0039_task_4_lift.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000014a  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000848  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ef  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000352  00000000  00000000  000011a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000014f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041f  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f8  00000000  00000000  0000196b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001a63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  8e:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <PWM_init>:
  Example Call: writeMotorSpeed(motorSpeed)
**
*/
void writeMotorSpeed(int speed)		//Function to write motor speed on the motor driver IC
{
  PWMREG = motorSpeed;
  96:	84 b5       	in	r24, 0x24	; 36
  98:	83 6a       	ori	r24, 0xA3	; 163
  9a:	84 bd       	out	0x24, r24	; 36
  9c:	85 b5       	in	r24, 0x25	; 37
  9e:	83 60       	ori	r24, 0x03	; 3
  a0:	85 bd       	out	0x25, r24	; 37
  a2:	56 9a       	sbi	0x0a, 6	; 10
  a4:	08 95       	ret

000000a6 <stop>:
  Example Call: stop()
**
*/
void stop()
{
      PORTB &= ~IN1;				//Setting IN1 to LOW
  a6:	28 98       	cbi	0x05, 0	; 5
      PORTD &= ~IN2;				//Setting IN2 to LOW
  a8:	5f 98       	cbi	0x0b, 7	; 11
  Example Call: writeMotorSpeed(motorSpeed)
**
*/
void writeMotorSpeed(int speed)		//Function to write motor speed on the motor driver IC
{
  PWMREG = motorSpeed;
  aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <motorSpeed>
  ae:	87 bd       	out	0x27, r24	; 39
  b0:	08 95       	ret

000000b2 <main>:
      writeMotorSpeed(0);
}

int main()
{
  PWM_init();
  b2:	0e 94 4b 00 	call	0x96	; 0x96 <PWM_init>
  DDRD &= ~IR;						//Setting PD4 as input
  b6:	54 98       	cbi	0x0a, 4	; 10
  DDRB |= IN1;						//Setting PB0 as output
  b8:	20 9a       	sbi	0x04, 0	; 4
  DDRD |= IN2;						//Setting PD7 as output
  ba:	57 9a       	sbi	0x0a, 7	; 10
  DDRD |= LimitSwitchUp;
  bc:	52 9a       	sbi	0x0a, 2	; 10
  DDRD |= LimitSwitchDown;
  be:	53 9a       	sbi	0x0a, 3	; 10
  Example Call: writeMotorSpeed(motorSpeed)
**
*/
void writeMotorSpeed(int speed)		//Function to write motor speed on the motor driver IC
{
  PWMREG = motorSpeed;
  c0:	c2 e0       	ldi	r28, 0x02	; 2
  c2:	d1 e0       	ldi	r29, 0x01	; 1
      PORTB &= ~IN1;					//Setting IN1 to LOW
      PORTD |= IN2;						//Setting IN2 to HIGH
      writeMotorSpeed(motorSpeed);
      while ((PIND & LimitSwitchDown) == 0);
      stop();
      goUp = 1;
  c4:	01 e0       	ldi	r16, 0x01	; 1
  c6:	10 e0       	ldi	r17, 0x00	; 0
  DDRD |= IN2;						//Setting PD7 as output
  DDRD |= LimitSwitchUp;
  DDRD |= LimitSwitchDown;
  while (1)
  {
    if (((PIND & IR) == 0) && goUp == 1) //Case when bot is on the lift and the lift needs to go up
  c8:	4c 99       	sbic	0x09, 4	; 9
  ca:	1c c0       	rjmp	.+56     	; 0x104 <main+0x52>
  cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	b1 f4       	brne	.+44     	; 0x104 <main+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	83 ed       	ldi	r24, 0xD3	; 211
  dc:	90 e3       	ldi	r25, 0x30	; 48
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x2c>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x36>
  e8:	00 00       	nop
    {
      _delay_ms(1000);					//Initial delay to make sure bot is completely on the lift
      PORTB |= IN1;						//Setting IN1 to HIGH
  ea:	28 9a       	sbi	0x05, 0	; 5
      PORTD &= ~IN2;					//Setting IN2 to LOW
  ec:	5f 98       	cbi	0x0b, 7	; 11
  Example Call: writeMotorSpeed(motorSpeed)
**
*/
void writeMotorSpeed(int speed)		//Function to write motor speed on the motor driver IC
{
  PWMREG = motorSpeed;
  ee:	88 81       	ld	r24, Y
  f0:	87 bd       	out	0x27, r24	; 39
    {
      _delay_ms(1000);					//Initial delay to make sure bot is completely on the lift
      PORTB |= IN1;						//Setting IN1 to HIGH
      PORTD &= ~IN2;					//Setting IN2 to LOW
      writeMotorSpeed(motorSpeed);
      while ((PIND & LimitSwitchUp) == 0);
  f2:	4a 9b       	sbis	0x09, 2	; 9
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <main+0x40>
      stop();
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <stop>
      goUp = 0;
  fa:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
  fe:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 102:	e2 cf       	rjmp	.-60     	; 0xc8 <main+0x16>
    }
    else if (((PIND & IR) == 0) && goUp == 0) //Case when bot is on the lift and the lift needs to go down
 104:	4c 99       	sbic	0x09, 4	; 9
 106:	1c c0       	rjmp	.+56     	; 0x140 <main+0x8e>
 108:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 10c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 110:	89 2b       	or	r24, r25
 112:	b1 f4       	brne	.+44     	; 0x140 <main+0x8e>
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	83 ed       	ldi	r24, 0xD3	; 211
 118:	90 e3       	ldi	r25, 0x30	; 48
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x68>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x72>
 124:	00 00       	nop
    {
      _delay_ms(1000);					//Initial delay to make sure bot is completely on the lift
      PORTB &= ~IN1;					//Setting IN1 to LOW
 126:	28 98       	cbi	0x05, 0	; 5
      PORTD |= IN2;						//Setting IN2 to HIGH
 128:	5f 9a       	sbi	0x0b, 7	; 11
  Example Call: writeMotorSpeed(motorSpeed)
**
*/
void writeMotorSpeed(int speed)		//Function to write motor speed on the motor driver IC
{
  PWMREG = motorSpeed;
 12a:	88 81       	ld	r24, Y
 12c:	87 bd       	out	0x27, r24	; 39
    {
      _delay_ms(1000);					//Initial delay to make sure bot is completely on the lift
      PORTB &= ~IN1;					//Setting IN1 to LOW
      PORTD |= IN2;						//Setting IN2 to HIGH
      writeMotorSpeed(motorSpeed);
      while ((PIND & LimitSwitchDown) == 0);
 12e:	4b 9b       	sbis	0x09, 3	; 9
 130:	fe cf       	rjmp	.-4      	; 0x12e <main+0x7c>
      stop();
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <stop>
      goUp = 1;
 136:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <__data_start+0x1>
 13a:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <__data_start>
 13e:	c4 cf       	rjmp	.-120    	; 0xc8 <main+0x16>
    }
    else
    {
      stop();
 140:	0e 94 53 00 	call	0xa6	; 0xa6 <stop>
 144:	c1 cf       	rjmp	.-126    	; 0xc8 <main+0x16>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
